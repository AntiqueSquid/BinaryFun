#Attempt at ALU, using Codecademy for assistance

from nand import NAND_gate
from not_gate import NOT_gate
from and_gate import AND_gate
from or_gate import OR_gate
from xor_gate import XOR_gate

def half_adder(a, b):
    s = XOR_gate(a, b)
    c = AND_gate(a, b)
    return (s, c)

print("half_adder test")
print(half_adder(0, 0))
print(half_adder(1, 0))
print(half_adder(0, 1))
print(half_adder(1, 1))
print("-------------------")
def full_adder(a, b, c):
    # First XOR gate
    s1 = XOR_gate(a, b)
    
    # Second XOR gate
    s = XOR_gate(s1, c)
    
    # c-bit
    c1 = AND_gate(a, b)
    c2 = AND_gate(s1, c)
    c_out = OR_gate(c1, c2)
    
    return (s, c_out)
print("full_adder test")
print(full_adder(0, 0, 0))  # Expected output: (0, 0)
print(full_adder(1, 1, 1))  # Expected output: (1, 1)
print(full_adder(1, 0, 1))  # Expected output: (0, 1)
print(full_adder(1, 1, 0))  # Expected output: (0, 1)
print("------------------")

#ALU
def ALU(a, b, c, opcode): 
  if opcode == 0:
    s, c = half_adder(a, b)
  elif opcode == 1:
    s, c = full_adder(a, b, c)
  elif opcode ==2:
    s, c = full_adder(a, 1, 0)
  return(s, c)

print("ALU test")
print(ALU(0, 0, 1, 0))
print(ALU(0, 0, 1, 1))
print(ALU(1, 1, 1, 0))
print(ALU(1, 1, 1, 1))
print("------------------")
print("ALU Increment Test")
print(ALU(0, 0, 0, 2))  # Expected output: (1, 0) because 0 + 1 = 1
print(ALU(1, 0, 0, 2))  # Expected output: (0, 1) because 1 + 1 = 10 (binary)







